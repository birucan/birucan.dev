{"version":3,"sources":["components/Window/Window.jsx","components/Applications/IntroWindow/IntroWindow.jsx","components/Taskbar/Taskbar.jsx","components/Screen/Screen.jsx","App.js","reportWebVitals.js","index.js"],"names":["Window","content","title","maximized","minimized","initWidth","initHeight","xPos","yPos","clickHandle","zIndex","id","active","style","handleMinimize","handleClose","useState","x","y","pos","setPos","height","width","size","setSize","prevPos","setPrevPos","prevSize","setPrevSize","maximizedState","setMaximizedState","canDrag","setCanDrag","default","position","onDragStop","e","d","onDragStart","onResizeStop","direction","ref","delta","offsetHeight","offsetWidth","onMouseDown","minWidth","minHeight","disableDragging","padding","className","onMouseLeave","onMouseOver","stopPropagation","onClick","newSize","window","innerHeight","innerWidth","maximizeHandler","IntroWindow","textAlign","justifyContent","left","open","Taskbar","background","bottom","borderTop","paddingLeft","paddingRight","Screen","Math","random","currentTop","initX","initY","activeWindows","setActiveWindows","windowNum","setWindowNum","windowRender","setWindowRender","updateState","setUpdateState","closeWindow","delElement","map","filter","item","clickWindow","oldZIndex","useEffect","visibility","backgroundColor","overflow","displayName","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bcbaef84.chunk.js","sourcesContent":["import React,{useState,useRef} from \"react\";\r\nimport { Rnd } from \"react-rnd\";\r\n\r\n// \r\n//position correspond to the upper left corner of the window \r\nexport default function Window({content=null,\r\n    title=\"\", \r\n    maximized=false,\r\n    minimized=false,\r\n    initWidth=100,\r\n    initHeight=100,\r\n    xPos=0,\r\n    yPos=0,\r\n    clickHandle,\r\n    zIndex,\r\n    id,\r\n    active=false,\r\n    style,\r\n    handleMinimize,\r\n    handleClose, \r\n  }) {\r\n\r\n\r\n    const [pos, setPos] = useState({x:xPos, y:yPos})\r\n    const [size, setSize] = useState({height:initHeight, width:initWidth})\r\n\r\n    const [prevPos, setPrevPos] = useState({x:xPos, y:yPos})\r\n    const [prevSize, setPrevSize] = useState({height:initHeight, width:initWidth})\r\n\r\n    const [maximizedState, setMaximizedState]= useState(maximized);\r\n\r\n    const [canDrag, setCanDrag] = useState(false)\r\n\r\n\r\n      const maximizeHandler=()=>{\r\n        if(!maximizedState){\r\n          setPrevPos(pos)\r\n          setPos({x:0, y:0})\r\n\r\n          setPrevSize(size)\r\n\r\n          let newSize= {height:window.innerHeight, width:window.innerWidth}\r\n\r\n          setSize(newSize)\r\n\r\n          setMaximizedState(true)\r\n        }else{\r\n          setPos(prevPos)\r\n\r\n          setSize(prevSize)\r\n\r\n          setMaximizedState(false)\r\n        }\r\n\r\n\r\n      }\r\n\r\n\r\n    return (\r\n      <Rnd     \r\n      default={{\r\n        x: xPos,\r\n        y: yPos,\r\n        width: initWidth,\r\n        height: initHeight\r\n      }}\r\n      position={{\r\n        x: pos.x,\r\n        y: pos.y,\r\n      }}\r\n      size={{\r\n        height:size.height,\r\n        width:size.width\r\n      }}\r\n      onDragStop={(e, d) => { setPos({ x: d.x, y: d.y });}}\r\n      onDragStart={ (e,d)=>{ \r\n        if(maximizedState===true){\r\n        setSize(prevSize)\r\n        setMaximizedState(false)\r\n        \r\n        }}}\r\n      onResizeStop={(e, direction, ref, delta, position) => {\r\n        setSize({height: ref.offsetHeight, width:ref.offsetWidth})\r\n      }}\r\n      onMouseDown={()=>clickHandle(id, zIndex) }\r\n      \r\n      minWidth={initWidth}\r\n      minHeight={initHeight} \r\n      disableDragging={!canDrag} \r\n      style={{ ...style, width: size.width, height: size.height, padding:'2px' }} className=\"window\" >\r\n        <div  >\r\n        <div className={(active===true)?\"title-bar\":\"title-bar inactive\"} onMouseLeave={()=>{setCanDrag(false)}} onMouseOver={()=>{setCanDrag(true)}} >\r\n          <div className=\"title-bar-text\" >{title}</div>\r\n          <div className=\"title-bar-controls\" onMouseOver={(e)=>{e.stopPropagation(); setCanDrag(false)}}>\r\n            <button aria-label=\"Minimize\"onClick={()=>{handleMinimize(id)}} />\r\n            <button aria-label={(maximizedState)?\"Restore\":\"Maximize\"} onClick={()=>maximizeHandler()}/>\r\n            <button aria-label=\"Close\" onClick={(e)=>{handleClose(id,e)}}/>\r\n          </div>\r\n        </div>\r\n  \r\n        <div className=\"window-body\">\r\n          {content}\r\n        </div>\r\n        </div>\r\n\r\n      </Rnd>\r\n\r\n\r\n\r\n\r\n    );\r\n};","import React,{useState} from \"react\";\r\nimport Window from \"../../Window/Window\";\r\nimport '98.css'\r\n\r\n\r\nexport default function IntroWindow() {\r\n\r\n    return (\r\n\r\n                <>\r\n                    <p style={{ textAlign: \"center\" }}>Hello I'm Tomas Kavanagh, this will be my portafolio site, currently a WIP. for now you can check my github.</p>\r\n                    <br/><br/>\r\n\r\n                    <div className=\"field-row\" style={{ justifyContent: \"center\" }}>\r\n                    <button style={{left:100 }}onClick={()=>{ window.open(\"https://github.com/birucan\");}}>\r\n                        github\r\n                    </button>\r\n\r\n\r\n                 </div>\r\n\r\n                </>\r\n\r\n    );\r\n}\r\nIntroWindow.displayName = \"Intro\";\r\n","import React,{useState} from \"react\";\r\n\r\n\r\nexport default function Taskbar(){\r\n    return(\r\n        <div style={{   \r\n            background:\"#c0c0c0\",\r\n            height:35,\r\n            width:\"100vw\",\r\n            position: \"fixed\",\r\n            bottom: 0,\r\n            left: 0,\r\n            borderTop: \"2px solid #fff\",\r\n            zIndex:2147483600}}>\r\n\r\n            <div className=\"startButtonContainer\">\r\n                <button style={{  \r\n                    paddingLeft: 28,\r\n                    paddingRight: 5,\r\n                    height: 32,\r\n\r\n                 }}>\r\n                    <b>Start</b>\r\n                </button>\r\n            </div>\r\n\r\n            \r\n\r\n        </div>\r\n    );\r\n}","import React,{useState, useEffect} from \"react\";\r\nimport Window from \"../Window/Window\";\r\nimport IntroWindow from \"../Applications/IntroWindow/IntroWindow\";\r\nimport Taskbar from \"../Taskbar/Taskbar\";\r\n\r\n\r\nexport default function Screen() {\r\n    const [activeWindows, setActiveWindows] = useState([{id:1, window:<IntroWindow key={Math.random()}/>, zIndex:1, currentTop:false, title:\"Intro\", minimized:false, initHeight:150, initWidth:200, initX:20, initY:20}, \r\n    {id:2, window:<IntroWindow key={Math.random()}/>, zIndex:2, currentTop:true, title:\"Intro2\", minimized:false, initHeight:150, initWidth:200, initX:100, initY:100}]);\r\n    const [windowNum, setWindowNum] = useState(2);\r\n    const [windowRender, setWindowRender] = useState([])\r\n    const [updateState, setUpdateState] = useState(Math.random())\r\n\r\n    const addWindow=(newWindow, title=\"untitled\", initHeight=200, initWidth=200, initX=0, initY=0)=>{\r\n        setWindowNum(windowNum+1)\r\n        setActiveWindows(activeWindows.map(window => {\r\n            return {...window, id:window.id, window:window.window, zIndex:window.zIndex, currentTop:false}\r\n        }));\r\n        setActiveWindows(...activeWindows, {id:windowNum, window:newWindow, zIndex:windowNum, currentTop:true, title:title, initHeight:initHeight, initWidth:initWidth, initX:initX, initY:initY});\r\n        setUpdateState(Math.random())\r\n    }\r\n\r\n    const closeWindow=(id,e )=>{\r\n        e.stopPropagation();\r\n        setWindowNum(windowNum-1)\r\n\r\n        let delElement;\r\n\r\n        setActiveWindows(activeWindows.map(window => {\r\n\r\n            if(window.id === id){\r\n                delElement= window;\r\n                return window;\r\n            }else{\r\n                if(window.zIndex>windowNum){\r\n                    return {...window, id:window.id, window:window.window, zIndex:window.zIndex-1, currentTop:false}\r\n                }else{\r\n                    return window;\r\n                }\r\n            }\r\n        }));\r\n\r\n        setActiveWindows(activeWindows.filter(item => item !== delElement))\r\n        setUpdateState(Math.random())\r\n\r\n    }\r\n\r\n    const clickWindow=(id, oldZIndex)=>{\r\n\r\n        setActiveWindows(activeWindows.map(window => {\r\n\r\n            if(window.id === id){\r\n                return {...window, zIndex:windowNum, currentTop:true};\r\n            }else{\r\n                if(window.zIndex===windowNum){\r\n                    return {...window, zIndex:oldZIndex, currentTop:false}\r\n                }else{\r\n                    return {...window, currentTop:false};\r\n                }\r\n            }\r\n        }));\r\n\r\n        setUpdateState(Math.random())\r\n    }\r\n\r\n    const handleMinimize = (id) =>{\r\n        setActiveWindows(activeWindows.map(window => {\r\n\r\n            if(window.id === id){\r\n                return {...window, zIndex:windowNum, minimized:true, currentTop:true};\r\n            }else{\r\n                return window\r\n            }\r\n        }));\r\n\r\n        setUpdateState(Math.random())\r\n    }\r\n    \r\n\r\n\r\n\r\n    useEffect(() => {\r\n        setWindowRender(activeWindows.map((window)=>{\r\n        \r\n          return (<Window\r\n                    zIndex={window.zIndex}\r\n                    id={window.id}\r\n                    style={{zIndex:window.zIndex, visibility:(window.minimized)?\"hidden\":\"visible\"}} \r\n                    content={window.window} \r\n                    title={window.title} \r\n                    key={window.id} \r\n                    initHeight={window.initHeight}\r\n                    initWidth={window.initWidth}\r\n                    xPos={window.initX}\r\n                    yPos={window.initY}\r\n                    clickHandle={clickWindow}\r\n                    handleClose={closeWindow}\r\n                    handleMinimize={handleMinimize}\r\n                    active={window.currentTop}\r\n                \r\n                    />) ;\r\n        }))\r\n\r\n    }, [updateState, windowNum])\r\n    \r\n    return (\r\n        <>\r\n        <div style={{backgroundColor:\"#008080\", minHeight:'100vh',minWidth:'100vw', overflow:\"hidden\",}}>\r\n           { windowRender}\r\n        </div>\r\n        <Taskbar activeWindows={activeWindows} />\r\n        </> \r\n\r\n    );\r\n}","\r\nimport React,{useState} from 'react';\r\nimport Screen from \"./components/Screen/Screen\"\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n\r\n  return (\r\n\r\n    <div className=\"App\">\r\n      <Screen></Screen>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}